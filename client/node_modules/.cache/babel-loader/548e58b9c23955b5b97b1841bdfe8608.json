{"ast":null,"code":"import * as api from '../../api/TodoAPI';\nimport { GET_TODOS_REQUEST, GET_TODOS_SUCCESS, GET_TODOS_FAIL, GET_TODO_REQUEST, GET_TODO_SUCCESS, GET_TODO_FAIL, CREATE_TODO_REQUEST, CREATE_TODO_SUCCESS, CREATE_TODO_FAIL, UPDATE_TODO_REQUEST, UPDATE_TODO_SUCCESS, UPDATE_TODO_FAIL, DELETE_TODO_REQUEST, DELETE_TODO_SUCCESS, DELETE_TODO_FAIL } from './types';\nconst config = {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\nexport const getTodosAction = () => async dispatch => {\n  try {\n    dispatch({\n      type: GET_TODOS_REQUEST\n    });\n    const todos = await api.getTodos();\n    dispatch({\n      type: GET_TODOS_SUCCESS,\n      payload: todos\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_TODOS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getTodoAction = id => async dispatch => {\n  try {\n    dispatch({\n      type: GET_TODO_REQUEST\n    });\n    const data = await api.getTodo(id);\n    dispatch({\n      type: GET_TODO_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: GET_TODO_FAIL,\n      payload: message\n    });\n  }\n};\nexport const createTodoAction = post => async dispatch => {\n  try {\n    dispatch({\n      type: CREATE_TODO_REQUEST\n    });\n    console.log(post);\n    const data = await api.createTodo(post);\n    dispatch({\n      type: CREATE_TODO_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: CREATE_TODO_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateTodoAction = post => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_TODO_REQUEST\n    });\n    const data = await api.updateTodo(post, config);\n    dispatch({\n      type: UPDATE_TODO_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: UPDATE_TODO_FAIL,\n      payload: message\n    });\n  }\n};\nexport const deleteTodoAction = id => async dispatch => {\n  try {\n    dispatch({\n      type: DELETE_TODO_REQUEST\n    });\n    await api.deleteTodo(id);\n    dispatch({\n      type: DELETE_TODO_SUCCESS,\n      payload: id\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: DELETE_TODO_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/lege/Projects/getir-project/client/src/store/actions/index.ts"],"names":["api","GET_TODOS_REQUEST","GET_TODOS_SUCCESS","GET_TODOS_FAIL","GET_TODO_REQUEST","GET_TODO_SUCCESS","GET_TODO_FAIL","CREATE_TODO_REQUEST","CREATE_TODO_SUCCESS","CREATE_TODO_FAIL","UPDATE_TODO_REQUEST","UPDATE_TODO_SUCCESS","UPDATE_TODO_FAIL","DELETE_TODO_REQUEST","DELETE_TODO_SUCCESS","DELETE_TODO_FAIL","config","headers","getTodosAction","dispatch","type","todos","getTodos","payload","error","response","data","message","getTodoAction","id","getTodo","createTodoAction","post","console","log","createTodo","updateTodoAction","updateTodo","deleteTodoAction","deleteTodo"],"mappings":"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","sourcesContent":["import * as api from '../../api/TodoAPI';\nimport {\n    GET_TODOS_REQUEST,\n    GET_TODOS_SUCCESS,\n    GET_TODOS_FAIL,\n\n    GET_TODO_REQUEST,\n    GET_TODO_SUCCESS,\n    GET_TODO_FAIL,\n\n    CREATE_TODO_REQUEST,\n    CREATE_TODO_SUCCESS,\n    CREATE_TODO_FAIL,\n\n    UPDATE_TODO_REQUEST,\n    UPDATE_TODO_SUCCESS,\n    UPDATE_TODO_FAIL,\n\n    DELETE_TODO_REQUEST,\n    DELETE_TODO_SUCCESS,\n    DELETE_TODO_FAIL,\n} from './types';\n\nconst config = {\n    headers: {\n        'Content-Type': 'application/json',\n    }\n};\n\nexport const getTodosAction = () => async (dispatch) => {\n    try {\n        dispatch({type: GET_TODOS_REQUEST})\n\n        const todos = await api.getTodos();\n\n        dispatch({type: GET_TODOS_SUCCESS, payload: todos});\n    } catch (error: any) {\n        dispatch({\n            type: GET_TODOS_FAIL,\n            payload:\n                error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message,\n        })\n    }\n};\n\nexport const getTodoAction = (id) => async (dispatch) => {\n    try {\n        dispatch({type: GET_TODO_REQUEST})\n\n        const data = await api.getTodo(id);\n\n        dispatch({type: GET_TODO_SUCCESS, payload: data});\n    } catch (error: any) {\n        const message =\n            error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message;\n\n        dispatch({\n            type: GET_TODO_FAIL,\n            payload: message\n        })\n    }\n};\n\nexport const createTodoAction = (post) => async (dispatch) => {\n    try {\n\n        dispatch({type: CREATE_TODO_REQUEST})\n\n        console.log(post)\n        const data = await api.createTodo(post);\n\n        dispatch({type: CREATE_TODO_SUCCESS, payload: data});\n    } catch (error: any) {\n        const message =\n            error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message;\n        dispatch({\n            type: CREATE_TODO_FAIL,\n            payload: message,\n        })\n    }\n};\n\nexport const updateTodoAction = (post) => async (dispatch) => {\n    try {\n        dispatch({type: UPDATE_TODO_REQUEST})\n\n        const data = await api.updateTodo(post, config);\n\n        dispatch({type: UPDATE_TODO_SUCCESS, payload: data});\n    } catch (error: any) {\n        const message =\n            error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message;\n\n        dispatch({\n            type: UPDATE_TODO_FAIL,\n            payload: message,\n        })\n    }\n};\n\nexport const deleteTodoAction = (id) => async (dispatch) => {\n    try {\n        dispatch({type: DELETE_TODO_REQUEST})\n\n        await api.deleteTodo(id);\n        dispatch({type: DELETE_TODO_SUCCESS, payload: id});\n    } catch (error: any) {\n        const message =\n            error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message;\n        dispatch({\n            type: DELETE_TODO_FAIL,\n            payload: message,\n        })\n    }\n};\n"]},"metadata":{},"sourceType":"module"}