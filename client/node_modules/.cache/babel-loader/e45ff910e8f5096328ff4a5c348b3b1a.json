{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { combineReducers } from 'redux';\nimport { todoListReducer, todoDetailsReducer, todoDeleteReducer, todoCreateReducer, todoUpdateReducer } from './store/reducers';\nconst reducer = combineReducers({\n  todoList: todoListReducer,\n  todoDetails: todoDetailsReducer,\n  todoDelete: todoDeleteReducer,\n  todoCreate: todoCreateReducer,\n  todoUpdate: todoUpdateReducer\n});\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/Users/lege/Projects/getir-project/client/src/store.tsx"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","combineReducers","todoListReducer","todoDetailsReducer","todoDeleteReducer","todoCreateReducer","todoUpdateReducer","reducer","todoList","todoDetails","todoDelete","todoCreate","todoUpdate","initialState","middleware","store"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,eAAR,QAA8B,OAA9B;AAEA,SACIC,eADJ,EAEIC,kBAFJ,EAGIC,iBAHJ,EAIIC,iBAJJ,EAKIC,iBALJ,QAMO,kBANP;AAQA,MAAMC,OAAO,GAAGN,eAAe,CAAC;AAC5BO,EAAAA,QAAQ,EAAEN,eADkB;AAE5BO,EAAAA,WAAW,EAAEN,kBAFe;AAG5BO,EAAAA,UAAU,EAAEN,iBAHgB;AAI5BO,EAAAA,UAAU,EAAEN,iBAJgB;AAK5BO,EAAAA,UAAU,EAAEN;AALgB,CAAD,CAA/B;AAQA,MAAMO,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAG,CAACd,KAAD,CAAnB;AAEA,MAAMe,KAAK,GAAGlB,WAAW,CACrBU,OADqB,EAErBM,YAFqB,EAGrBd,mBAAmB,CAACD,eAAe,CAAC,GAAGgB,UAAJ,CAAhB,CAHE,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["import {createStore, applyMiddleware} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport {combineReducers} from 'redux';\n\nimport {\n    todoListReducer,\n    todoDetailsReducer,\n    todoDeleteReducer,\n    todoCreateReducer,\n    todoUpdateReducer,\n} from './store/reducers';\n\nconst reducer = combineReducers({\n    todoList: todoListReducer,\n    todoDetails: todoDetailsReducer,\n    todoDelete: todoDeleteReducer,\n    todoCreate: todoCreateReducer,\n    todoUpdate: todoUpdateReducer\n});\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    reducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;"]},"metadata":{},"sourceType":"module"}