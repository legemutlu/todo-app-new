{"ast":null,"code":"var _jsxFileName = \"/Users/lege/Projects/getir-project/client/src/components/TodoItem.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { HStack, VStack, Text, IconButton, StackDivider, Spacer, Badge, Heading, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, Input, ModalFooter, Button } from '@chakra-ui/react';\nimport { FaTrash, FaPen, FaCheck, FaWindowClose } from \"react-icons/fa\";\nimport DatePicker from \"react-datepicker\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TodoItem = _ref => {\n  _s();\n\n  let {\n    todos,\n    updateTodo,\n    deleteTodo\n  } = _ref;\n  const [todo, setTodo] = useState(\"\");\n  const [modalValue, setModalValue] = useState({\n    name: '',\n    description: '',\n    startDate: new Date(),\n    endDate: new Date()\n  });\n  const [isOpen, setIsOpen] = useState(false);\n\n  const onChange = e => {\n    setModalValue({ ...modalValue,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  function onClose() {\n    setIsOpen(false);\n  }\n\n  function handleEditSubmit(e) {\n    e.preventDefault();\n    updateTodo(modalValue);\n    setIsOpen(false);\n  }\n\n  function handleEditClick(todo) {\n    setIsOpen(true);\n    console.log(todo);\n    setModalValue({ ...todo,\n      name: todo.name,\n      description: todo.description,\n      startDate: todo.startDate.toISOString(),\n      endDate: todo.endDate.toISOString()\n    });\n  }\n\n  const handleStatusEditClick = (e, todo) => {\n    e.preventDefault();\n\n    if (todo.status === 'incomplete') {\n      updateTodo({ ...todo,\n        status: 'complete'\n      });\n    } else {\n      updateTodo({ ...todo,\n        status: 'incomplete'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(VStack, {\n    divider: /*#__PURE__*/_jsxDEV(StackDivider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 22\n    }, this),\n    borderColor: \"gray.100\",\n    borderWidth: \"2px\",\n    p: \"4\",\n    borderRadius: \"lg\",\n    w: \"100%\",\n    maxW: {\n      base: '90vw',\n      sm: '80vw',\n      lg: '50vw',\n      xl: '40vw'\n    },\n    alignItems: \"stretch\",\n    children: todos && todos.length > 0 && todos.map(todo => /*#__PURE__*/_jsxDEV(HStack, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        fontSize: \"xl\",\n        children: todo.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        mt: 4,\n        children: todo.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Badge, {\n        m: \"15\",\n        fontSize: \"0.8em\",\n        colorScheme: todo.status === 'incomplete' ? 'red' : 'green',\n        children: todo.status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        color: todo.status === 'incomplete' ? 'green.500' : 'red.500',\n        icon: todo.status === 'incomplete' ? /*#__PURE__*/_jsxDEV(FaCheck, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 62\n        }, this) : /*#__PURE__*/_jsxDEV(FaWindowClose, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 75\n        }, this),\n        isRound: true,\n        onClick: e => handleStatusEditClick(e, todo),\n        \"aria-label\": \"lege\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        color: \"blue.500\",\n        icon: /*#__PURE__*/_jsxDEV(FaPen, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 31\n        }, this),\n        isRound: true,\n        onClick: () => handleEditClick(todo),\n        \"aria-label\": \"lege\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        color: \"red.500\",\n        icon: /*#__PURE__*/_jsxDEV(FaTrash, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 31\n        }, this),\n        isRound: true,\n        onClick: () => deleteTodo(todo._id),\n        \"aria-label\": \"lege\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isOpen,\n        onClose: onClose,\n        children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n          children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n            children: \"Edit Your Todo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleEditSubmit,\n            children: [/*#__PURE__*/_jsxDEV(ModalBody, {\n              children: [\"Name: \", /*#__PURE__*/_jsxDEV(Input, {\n                name: \"name\",\n                value: modalValue.name,\n                variant: \"outline\",\n                type: \"text\",\n                placeholder: \"name\",\n                onChange: onChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 43\n              }, this), \"Description: \", /*#__PURE__*/_jsxDEV(Input, {\n                name: \"description\",\n                value: modalValue.description,\n                variant: \"outline\",\n                type: \"text\",\n                placeholder: \"description\",\n                onChange: onChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 50\n              }, this), \"Start Date: \", /*#__PURE__*/_jsxDEV(DatePicker, {\n                selected: modalValue.startDate,\n                onChange: date => setModalValue({ ...modalValue,\n                  startDate: date\n                }),\n                minDate: new Date()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 49\n              }, this), \"End Date: \", /*#__PURE__*/_jsxDEV(DatePicker, {\n                selected: modalValue.endDate,\n                onChange: date => setModalValue({ ...modalValue,\n                  endDate: date\n                }),\n                minDate: modalValue.startDate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 47\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                colorScheme: \"teal\",\n                mr: 3,\n                onClick: onClose,\n                children: \"Close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                colorScheme: \"teal\",\n                mr: 3,\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this)]\n    }, todo._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TodoItem, \"3oph6KEMChM5IHodR6Bj6+SR1XY=\");\n\n_c = TodoItem;\nexport default TodoItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoItem\");","map":{"version":3,"sources":["/Users/lege/Projects/getir-project/client/src/components/TodoItem.tsx"],"names":["React","useState","HStack","VStack","Text","IconButton","StackDivider","Spacer","Badge","Heading","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","Input","ModalFooter","Button","FaTrash","FaPen","FaCheck","FaWindowClose","DatePicker","TodoItem","todos","updateTodo","deleteTodo","todo","setTodo","modalValue","setModalValue","name","description","startDate","Date","endDate","isOpen","setIsOpen","onChange","e","target","value","onClose","handleEditSubmit","preventDefault","handleEditClick","console","log","toISOString","handleStatusEditClick","status","base","sm","lg","xl","length","map","_id","date"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport {\n    HStack,\n    VStack,\n    Text,\n    IconButton,\n    StackDivider,\n    Spacer,\n    Badge,\n    Heading,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalCloseButton,\n    ModalBody,\n    Input,\n    ModalFooter,\n    Button,\n} from '@chakra-ui/react';\nimport {FaTrash, FaPen, FaCheck, FaWindowClose} from \"react-icons/fa\";\nimport DatePicker from \"react-datepicker\";\n\n\ntype Props = TodoProps & {\n    todos: Todo[],\n    updateTodo: (todo) => void\n    deleteTodo: (_id: string) => void\n}\n\nconst TodoItem: React.FC<Props> = ({todos, updateTodo, deleteTodo}) => {\n    const [todo, setTodo] = useState(\"\");\n    const [modalValue, setModalValue] = useState({\n        name: '',\n        description: '',\n        startDate: new Date(),\n        endDate: new Date()\n    })\n\n    const [isOpen, setIsOpen] = useState(false)\n\n    const onChange = e => {\n        setModalValue({...modalValue, [e.target.name]: e.target.value});\n    };\n\n    function onClose() {\n        setIsOpen(false)\n    }\n\n    function handleEditSubmit(e) {\n        e.preventDefault();\n        updateTodo(modalValue)\n        setIsOpen(false)\n    }\n\n    function handleEditClick(todo) {\n        setIsOpen(true)\n        console.log(todo)\n        setModalValue({\n            ...todo,\n            name: todo.name,\n            description: todo.description,\n            startDate: todo.startDate.toISOString(),\n            endDate: todo.endDate.toISOString()\n        })\n    }\n\n    const handleStatusEditClick = (e, todo) => {\n        e.preventDefault();\n        if (todo.status === 'incomplete') {\n            updateTodo({...todo, status: 'complete'});\n        } else {\n            updateTodo({...todo, status: 'incomplete'});\n        }\n    }\n\n    return (\n        <VStack\n            divider={<StackDivider/>}\n            borderColor='gray.100'\n            borderWidth='2px'\n            p='4'\n            borderRadius='lg'\n            w='100%'\n            maxW={{base: '90vw', sm: '80vw', lg: '50vw', xl: '40vw'}}\n            alignItems='stretch'\n        >\n            {todos && todos.length > 0 && todos.map((todo) => (\n                <HStack key={todo._id}>\n                    <Heading fontSize='xl'>{todo.name}</Heading>\n                    <Text mt={4}>{todo.description}</Text>\n                    <Spacer/>\n                    <Badge m='15' fontSize='0.8em' colorScheme={todo.status === 'incomplete' ? 'red' : 'green'}>\n                        {todo.status}\n                    </Badge>\n                    <Spacer/>\n                    <IconButton\n                        color={todo.status === 'incomplete' ? 'green.500' : 'red.500'}\n                        icon={todo.status === 'incomplete' ? <FaCheck/> : <FaWindowClose/>}\n                        isRound={true}\n                        onClick={(e) => handleStatusEditClick(e, todo)}\n                        aria-label={\"lege\"}/>\n                    <IconButton\n                        color=\"blue.500\"\n                        icon={<FaPen/>}\n                        isRound={true}\n                        onClick={() => handleEditClick(todo)}\n                        aria-label={\"lege\"}/>\n                    <IconButton\n                        color=\"red.500\"\n                        icon={<FaTrash/>}\n                        isRound={true}\n                        onClick={() => deleteTodo(todo._id)}\n                        aria-label={\"lege\"}/>\n\n                    {/* modal for editing a todo */}\n                    <Modal isOpen={isOpen} onClose={onClose}>\n                        <ModalOverlay/>\n                        <ModalContent>\n                            <ModalHeader>Edit Your Todo</ModalHeader>\n                            <ModalCloseButton/>\n                            <form onSubmit={handleEditSubmit}>\n                                <ModalBody>\n                                    Name: <Input\n                                    name=\"name\"\n                                    value={modalValue.name}\n                                    variant=\"outline\"\n                                    type=\"text\"\n                                    placeholder=\"name\"\n                                    onChange={onChange}/>\n                                    Description: <Input\n                                    name=\"description\"\n                                    value={modalValue.description}\n                                    variant=\"outline\"\n                                    type=\"text\"\n                                    placeholder=\"description\"\n                                    onChange={onChange}/>\n                                    Start Date: <DatePicker selected={modalValue.startDate}\n                                                            onChange={(date: Date) => setModalValue({\n                                                                ...modalValue,\n                                                                startDate: date\n                                                            })}\n                                                            minDate={new Date()}/>\n                                    End Date: <DatePicker selected={modalValue.endDate}\n                                                          onChange={(date: Date) => setModalValue({\n                                                              ...modalValue,\n                                                              endDate: date\n                                                          })}\n                                                          minDate={modalValue.startDate}/>\n                                </ModalBody>\n                                <ModalFooter>\n                                    <Button colorScheme=\"teal\" mr={3} onClick={onClose}>\n                                        Close\n                                    </Button>\n                                    <Button type=\"submit\" colorScheme=\"teal\" mr={3}>\n                                        Update\n                                    </Button>\n                                </ModalFooter>\n                            </form>\n\n                        </ModalContent>\n                    </Modal>\n                </HStack>\n            ))}\n        </VStack>\n    )\n}\n\nexport default TodoItem"]},"metadata":{},"sourceType":"module"}